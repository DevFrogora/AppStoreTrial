/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import Utils.FileDelete;
import static Utils.StringUtils.stripExtension;
import appstoretrial.AppStoreFrame;
import appstoretrial.Configuration;
import appstoretrial.FilePath;
import appstoretrial.JSONManager;
import appstoretrial.LoadingFrame;
import appstoretrial.LocalConfig;
import appstoretrial.Skipper;
import installation.IInstalCommunicator;
import installation.InstallApp;
import java.awt.Color;
import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.SwingWorker;
import launch.Launcher;
import org.json.JSONArray;
import org.json.JSONObject;
import org.riversun.promise.Func;
import org.riversun.promise.Promise;
import org.riversun.promise.SyncPromise;
import uninstal.Uninstaller;
import update.IUpdateCommunicator;
import update.UpdateApp;

/**
 *
 * @author root
 */
public class AppTemplateCard extends javax.swing.JPanel {

    /**
     * Creates new form AppTemplateCard
     */
    String localAppStoreDirectory = "C:\\Users\\root\\Desktop\\AppStoreDirectory";
    int appId;
    String appName = "";
    String appDescription = "";
    Image appImage = null;
    String appZipFileName = "";
    String appVersionNumber = "";
    String startPath = "";

    JSONObject appJSONObject = null;
    boolean appIsInstalled = false;
    boolean appUpdatedVersion = false;
    boolean appCanLaunch = false;
    JSONObject localConfigJSONObject = null;

    String localinstalDirectory = "";
    String localStartPath = "";

    public AppTemplateCard() {
        initComponents();
    }

    public AppTemplateCard(int appId, String appName, String appDescription, Image appImage, String appZipFileName, String appVersionNumber, String startPath) {
        this.appId = appId;
        this.appName = appName;
        this.appDescription = appDescription;
        this.appVersionNumber = appVersionNumber;
        this.appImage = appImage;
        this.appZipFileName = appZipFileName;
        this.startPath = startPath;
        appJSONObject = new JSONObject();
        appJSONObject.put("appId", appId);
        appJSONObject.put("appName", appName);
        appJSONObject.put("appVersionNumber", appVersionNumber);
        appJSONObject.put("startPath", startPath);

        initComponents();
        initialiseAppData();
        launchBtn.setVisible(false);
        checkDownloadOrUpdate();
        buttonReValidate();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        appNameJlabel = new javax.swing.JLabel();
        downloadBtn = new javax.swing.JButton();
        launchBtn = new javax.swing.JButton();
        appIconJLabel = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        progressbarStatus = new javax.swing.JLabel();
        uninstalBtn = new javax.swing.JButton();
        progressbarDetails = new javax.swing.JLabel();

        appNameJlabel.setText(appName);

        downloadBtn.setText("Download & install");
        downloadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadBtnActionPerformed(evt);
            }
        });

        launchBtn.setText("Launch");
        launchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                launchBtnActionPerformed(evt);
            }
        });

        appIconJLabel.setIcon(new javax.swing.ImageIcon(appImage));
        appIconJLabel.setText("jLabel3");

        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setAutoscrolls(false);
        jTextArea1.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane1.setViewportView(jTextArea1);

        progressbarStatus.setText("jLabel2");

        uninstalBtn.setText("Uninstall");
        uninstalBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uninstalBtnActionPerformed(evt);
            }
        });

        progressbarDetails.setText("jLabel4");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(appNameJlabel, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(downloadBtn)
                                    .addGap(98, 98, 98))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(16, 16, 16))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(uninstalBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(launchBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(progressbarStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(progressbarDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(appIconJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(appNameJlabel, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(appIconJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressbarStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(progressbarDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(launchBtn)
                    .addComponent(uninstalBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(downloadBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    void sleep(long milisecond) {
        try {
            Thread.sleep(milisecond);
        } catch (InterruptedException ex) {
            Logger.getLogger(LoadingFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    void initialiseAppData() {
        progressbarStatus.setText("");
        progressbarDetails.setText("");
        appNameJlabel.setText(appName);
        jTextArea1.setText(appDescription);
        appIconJLabel.setIcon(new javax.swing.ImageIcon(appImage));
        jTextArea1.setEditable(false);
    }

    void checkDownloadOrUpdate() {

        this.localConfigJSONObject = Configuration.getLocalConfig().getJSONObject();

        System.out.println("before ----> " + localConfigJSONObject);

        JSONArray appList = localConfigJSONObject.getJSONArray("Apps");
        int length = appList.length();
        System.out.println("" + length);

        for (int i = 0; i < length; i++) {

            JSONObject appLocalObject = appList.getJSONObject(i);
            if (appLocalObject.getInt("appId") == appJSONObject.getInt("appId")) {
                appIsInstalled = true;
                if (appLocalObject.getString("appVersionNumber").equals(appJSONObject.getString("appVersionNumber"))) {
                    localinstalDirectory = stripExtension(appZipFileName);
                    localStartPath = appLocalObject.getString("startPath");
                    appUpdatedVersion = true;
                    appCanLaunch = true;
                } else {
                    appUpdatedVersion = false;
                    // need to update;

                }
            }

        }

    }

    void buttonReValidate() {

        if (appIsInstalled) {
            if (appUpdatedVersion) {
                launchBtn.setVisible(true);
                downloadBtn.setVisible(false);
                uninstalBtn.setVisible(true);
            } else {
                downloadBtn.setVisible(true);
                launchBtn.setVisible(false);
                uninstalBtn.setVisible(true);
                downloadBtn.setText("Update");
            }
        } else {
            downloadBtn.setVisible(true);
            launchBtn.setVisible(false);
            uninstalBtn.setVisible(false);
            downloadBtn.setText("Download");
        }

    }

    public void addAppInList(JSONObject mainJSONObject, JSONObject appObject) {
        JSONArray appList = mainJSONObject.getJSONArray("Apps");
        appList.put(appObject);
        System.out.println("Adding" + mainJSONObject);
        Configuration.getLocalConfig().saveLocalCofig(FilePath.Local_AppStore_Directory + FilePath.Local_AppList_Config_File, mainJSONObject.toString());

    }

    InstallApp installApp;

    private void downloadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadBtnActionPerformed
        try {
            // TODO add your handling code here:
            Configuration.getLocalConfig().loadLocalConfig(FilePath.Local_AppStore_Directory + FilePath.Local_AppList_Config_File);
            this.localConfigJSONObject = Configuration.getLocalConfig().getJSONObject();
        } catch (IOException ex) {
            Logger.getLogger(AppTemplateCard.class.getName()).log(Level.SEVERE, null, ex);
        }
        jProgressBar1.setBackground(Color.WHITE);
        jProgressBar1.setForeground(Color.decode("#C7FF33"));

        jProgressBar1.setStringPainted(true);
        JSONArray appList = localConfigJSONObject.getJSONArray("Apps");
        int length = appList.length();
        System.out.println("" + length);

        for (int i = 0; i < length; i++) {

            JSONObject appLocalObject = appList.getJSONObject(i);

            //for install
            if (appLocalObject.getInt("appId") == appJSONObject.getInt("appId")) {
                System.out.println("App is already present");
                appIsInstalled = true;

                //for Update
                if (appLocalObject.getString("appVersionNumber").equals(appJSONObject.getString("appVersionNumber"))) {
                    System.out.println("App is already Updated");

                } else {
                    
                IUpdateCommunicator iUpdateCommunicator =    new IUpdateCommunicator() {
                        @Override
                        public void uiUpdate() {
                            appUpdatedVersion = true;
                            checkDownloadOrUpdate();
                            buttonReValidate();
                            // need to update;
                            appLocalObject.put("appVersionNumber", appJSONObject.getString("appVersionNumber"));
                            Configuration.getLocalConfig().saveLocalCofig(FilePath.Local_AppStore_Directory + FilePath.Local_AppList_Config_File, localConfigJSONObject.toString());
                            System.out.println("Check local object"+appLocalObject);
                            System.out.println("App updating" + localConfigJSONObject.toString());

                        }
                    };
                
                    UpdateApp updateApp;
                    updateApp = new UpdateApp(appZipFileName, appId, jProgressBar1, progressbarStatus, progressbarDetails, localConfigJSONObject, appJSONObject, 
                            new InstallerCommunicator()
                            , iUpdateCommunicator);
                    updateApp.run();

                }
            }

        }

        if (!appIsInstalled) {
            new AnswerWorker().execute();

        }


    }//GEN-LAST:event_downloadBtnActionPerformed

    class AnswerWorker extends SwingWorker<Integer, Integer> {

        protected Integer doInBackground() throws Exception {
            // Do a time-consuming task.
            System.out.println("downloadStart");

            installApp = new InstallApp(progressbarStatus, progressbarDetails, jProgressBar1, appZipFileName, localConfigJSONObject, appJSONObject, new InstallerCommunicator());
            int i = installApp.run();
            System.out.println(localConfigJSONObject);
            return i;
        }

        protected void done() {
            try {
                int i = get();
                if (i == 1) {
                    System.out.println("download Done");
                    System.out.println("App is  added");

                }

//            JOptionPane.showMessageDialog(f, get());
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    class InstallerCommunicator implements IInstalCommunicator {

        @Override
        public void uiUpdate() {
            checkDownloadOrUpdate();
            buttonReValidate();
        }

    }

    class UptadeCommunicator implements IUpdateCommunicator {

        @Override
        public void uiUpdate() {

        }

    }


    private void launchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_launchBtnActionPerformed
        // TODO add your handling code here:
        //launch
        String directory = FilePath.Local_AppStore_Directory + "\\" + localinstalDirectory;
        System.out.println("Launching Directory " + directory);
        launch.Launcher launcher = new Launcher();
        launcher.run(directory + "\\" + localStartPath);
    }//GEN-LAST:event_launchBtnActionPerformed

    private void uninstalBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uninstalBtnActionPerformed
        // TODO add your handling code here:
        if (appIsInstalled) {

            Func function1 = (action, data) -> {
                new Thread(() -> {
                    try {
                        new Uninstaller(appZipFileName, appId, jProgressBar1, progressbarStatus, progressbarDetails).run();
                    } catch (IOException ex) {
                        Logger.getLogger(AppTemplateCard.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    appIsInstalled = false;
                    action.resolve();
                }).start();
            };

            Func function2 = (action, data) -> {
                new Thread(() -> {
                    checkDownloadOrUpdate();
                    action.resolve();
                }).start();
            };

            Func function3 = (action, data) -> {
                new Thread(() -> {
                    buttonReValidate();
                    action.resolve();
                }).start();
            };

            Promise.resolve()
                    .then(new Promise(function1))
                    .then(new Promise(function2))
                    .then(new Promise(function3))
                    .start();// start Promise operation
        }

    }//GEN-LAST:event_uninstalBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel appIconJLabel;
    private javax.swing.JLabel appNameJlabel;
    private javax.swing.JButton downloadBtn;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JButton launchBtn;
    private javax.swing.JLabel progressbarDetails;
    private javax.swing.JLabel progressbarStatus;
    private javax.swing.JButton uninstalBtn;
    // End of variables declaration//GEN-END:variables
}
